initSidebarItems({"fn":[["parse","Complete parsing of a datum starting by the sentence symbol of the grammar."]],"macro":[["exclude","`exclude!(I -> Result<I, O>, I -> Result<I, P>) => I -> Result<I, 0>` returns the result of the first parser if the second fails. Both parsers run on the same input."],["first","`first!(I -> Result<I, O>) => I -> Result<I, O>` is applying the `skip` rule before the first argument; it allows to skip tokens."],["fold_into_vector_many0","`fold_into_vector_many0!(I -> IResult<I,O>, R) => I -> IResult<I, R>` is a wrapper around `fold_many0!` specifically designed for vectors."],["itag","`itag!(&[T]: nom::AsBytes) => &[T] -> Result<&[T], &[T]>` declares a case-insensitive ASCII array as a suite to recognize."],["keyword","`keyword!(&[T]: nom::AsBytes) => &[T] -> Result<&[T], &[T]>` is an alias to the `itag` macro."]],"mod":[["ast","Structures that will constitute the Abstract Syntax Tree."],["internal","Internal utilities for the parser."],["macros","Extra macros helping to write parsers."],["rules","The grammar as a set of rules."],["tokens","List of lexemes."]]});